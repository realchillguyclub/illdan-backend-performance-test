name: Run K6 (manual pick)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref (branch/tag/SHA). 기본 main'
        required: false
        default: 'main'
      script_path:
        description: '실행할 JS (예: scripts/test/test.test.js)'
        required: true

env:
  TARGET_URL: ${{ secrets.TARGET_URL }}
  REMOTE_BASE_PATH: ${{ secrets.REMOTE_BASE_PATH }}

jobs:
  run-k6-manual:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------
      # 1️⃣ 지정한 ref(브랜치/태그/SHA) 체크아웃
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}

      # ------------------------------------------------------------
      # 2️⃣ script_path 유효성 검사
      #    - scripts/ 하위의 .js 파일만 허용
      #    - 지정한 ref 기준으로 파일이 존재해야 함
      # ------------------------------------------------------------
      - name: Validate script_path
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          P="${{ github.event.inputs.script_path }}"
          case "$P" in
            scripts/*.js|scripts/**/*.js) ;;
            *) echo "::error::scripts/ 하위의 .js 파일만 실행 가능합니다: $P"; exit 1 ;;
          esac
          [ -f "$P" ] || { echo "::error::파일 없음: $P"; exit 1; }
          echo "script_path=$P" >> "$GITHUB_OUTPUT"

      # ------------------------------------------------------------
      # 3️⃣ 원격 k6 디렉터리의 기존 JS 정리 (JS만 삭제, 기타 파일 보존)
      # ------------------------------------------------------------
      - name: Clean old JS (remote)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            bash -lc '
              set -euo pipefail
              echo "🧹 Removing old JS files in ${{ env.REMOTE_BASE_PATH }}/k6"
              find "${{ env.REMOTE_BASE_PATH }}/k6" -maxdepth 1 -type f -name "*.js" -print -delete || true
            '

      # ------------------------------------------------------------
      # 4️⃣ 선택된 스크립트만 원격 k6 디렉터리로 전송
      # ------------------------------------------------------------
      - name: Upload selected script
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          source: ${{ steps.pick.outputs.script_path }}
          target: ${{ env.REMOTE_BASE_PATH }}/k6

      # ------------------------------------------------------------
      # 5️⃣ EC2에서 docker-compose를 통해 k6 실행
      #     - influxdb로 결과를 저장하고, ACCESS_TOKEN과 TARGET_URL을 환경 변수로 전달
      # ------------------------------------------------------------
      - name: Run k6 (InfluxDB output)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            bash -lc '
              set -euo pipefail
              cd "${{ env.REMOTE_BASE_PATH }}"
              
              # GitHub Actions에서 넘겨받은 파일명 추출
              SCRIPT_FILE=$(basename "${{ steps.pick.outputs.script_path }}")
  
              echo "🚀 Running k6: ${SCRIPT_FILE}"
            
              # docker-compose로 k6 테스트 실행
              docker-compose run --rm k6 run \
                -o influxdb=http://influxdb:8086/k6 \     
                -e BASE_URL="${{ env.TARGET_URL }}" \     
                -e TOKEN="Bearer ${{ secrets.ACCESS_TOKEN }}" \  
                "/scripts/${SCRIPT_FILE}"
            '
